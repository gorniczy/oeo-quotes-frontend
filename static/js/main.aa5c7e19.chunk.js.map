{"version":3,"sources":["img/refresh.svg","img/quote.svg","components/Header.js","components/Quote.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Quote","fragment","authorContent","nameContent","locationContent","commentContent","src","quote","alt","id","Login","props","handleChange","event","setState","input","target","value","handleSubmit","preventDefault","login","state","alert","this","onSubmit","type","name","placeholder","onChange","React","Component","App","fetchData","fetch","then","response","json","payLoad","author","location","comment","tagsContent","tags","passAlert","method","headers","body","JSON","stringify","password","data","loggedIn","catch","err","console","log","prevProps","prevState","Fragment","onClick","refresh","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yHAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,oNCU5BC,EARA,WACb,OACE,yBAAKC,UAAU,UACb,0C,gBC0BSC,EA5BD,SAAC,GAMP,IALLC,EAKI,EALJA,SACDC,EAIK,EAJLA,cACAC,EAGK,EAHLA,YACAC,EAEK,EAFLA,gBACAC,EACK,EADLA,eAEA,OACE,yBAAKN,UAAU,qBACb,yBAAKA,UAAU,eAAeO,IAAMC,IAAQC,IAAI,KAChD,yBAAKT,UAAU,iBACb,yBAAKA,UAAU,gBACb,uBAAGU,GAAG,WAAWR,GACjB,uBAAGQ,GAAG,WACHP,EADH,MACqBC,EADrB,WAC0CC,IAG5C,yBAAKL,UAAU,mBACb,yBAAKA,UAAU,iBACb,uBAAGU,GAAG,WAAWJ,IAEnB,uBAAGI,GAAG,aCWDC,E,YAhCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,MAAOF,EAAMG,OAAOC,SATL,EAanBC,aAAe,SAACL,GACdA,EAAMM,iBACN,EAAKR,MAAMS,MAAM,EAAKC,MAAMN,QAb5B,EAAKM,MAAQ,CACXN,MAAO,oBAHQ,E,sEAkBT,IACAO,EAAUC,KAAKZ,MAAfW,MACR,OACE,yBAAKvB,UAAU,eACb,0BAAMyB,SAAUD,KAAKL,cACnB,2BAAOnB,UAAU,cAAc0B,KAAK,WAAWC,KAAK,WAAWC,YAAY,aAAQC,SAAUL,KAAKX,eAClG,2BAAOb,UAAU,SAAS0B,KAAK,SAASR,MAAM,eAC7CK,GAAU,uBAAGvB,UAAU,cAAb,uC,GA1BD8B,IAAMC,WC8FXC,E,YAxFb,WAAYpB,GAAQ,IAAD,8BACjB,4CAAMA,KAkBRqB,UAAY,WACVC,MAAM,iDACLC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKvB,SAAS,CACZb,SAAUoC,EAAQ,GAAGpC,SACrBC,cAAemC,EAAQ,GAAGC,OAC1BnC,YAAakC,EAAQ,GAAGX,KACxBtB,gBAAiBiC,EAAQ,GAAGE,SAC5BlC,eAAgBgC,EAAQ,GAAGG,QAC3BC,YAAaJ,EAAQ,GAAGK,KACxBC,UAAW,SA9BE,EAmCnBvB,MAAQ,SAACL,GACPkB,MAAM,iDAAkD,CACtDW,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACnBC,SAAUlC,MAGXmB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAgB,GACS,eAATA,GACF,EAAKpC,SAAS,CACZqC,UAAU,IAGd,EAAKrC,SAAS,CACZ6B,UAAW,qCAGdS,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OApD5B,EAAKhC,MAAQ,CACX8B,UAAU,EACVlD,SAAU,GACVC,cAAe,GACfC,YAAa,GACbC,gBAAiB,GACjBC,eAAgB,GAChBoC,YAAa,IATE,E,gFAaAe,EAAWC,GACxBA,EAAUN,WAAa5B,KAAKF,MAAM8B,WAAoC,IAAxB5B,KAAKF,MAAM8B,UAC3D5B,KAAKS,c,+BA0CC,IAAD,SAQHT,KAAKF,MANP8B,EAFK,EAELA,SACAlD,EAHK,EAGLA,SACAC,EAJK,EAILA,cACAC,EALK,EAKLA,YACAC,EANK,EAMLA,gBACAC,EAPK,EAOLA,eAGF,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,MACCoD,EACG,kBAAC,IAAMO,SAAP,KACE,kBAAC,EAAD,CACAzD,SAAUA,EACVC,cAAeA,EACfC,YAAaA,EACbC,gBAAiBA,EACjBC,eAAgBA,IAEhB,yBAAKsD,QAAS,kBAAM,EAAK3B,aAAajC,UAAU,iBAAiBO,IAAMsD,IAAUpD,IAAI,MAEvF,kBAAC,EAAD,CAAOY,MAAOG,KAAKH,MAAOE,MAAOC,KAAKF,MAAMsB,iB,GAlFtCd,IAAMC,WCKJ+B,QACW,cAA7BC,OAAOvB,SAASwB,UAEe,UAA7BD,OAAOvB,SAASwB,UAEhBD,OAAOvB,SAASwB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.aa5c7e19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/refresh.b0129912.svg\";","module.exports = __webpack_public_path__ + \"static/media/quote.704e0bc9.svg\";","import React from \"react\"\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <h2>Cytatnik</h2>\n    </div>\n  )\n}\n\nexport default Header","import React from \"react\"\nimport quote from '../img/quote.svg'\n\nconst Quote = (\n  {fragment,\n  authorContent,\n  nameContent,\n  locationContent,\n  commentContent}\n  ) => {\n  return (\n    <div className='excerpt_container'>\n      <img className='quote_symbol' src={ quote } alt=\"\"/>\n      <div className='excerpt_block'>\n        <div className='excerpt_info'>\n          <p id='excerpt'>{fragment}</p>\n          <p id='details'>\n            {authorContent}; \"{nameContent}\", str. {locationContent}\n          </p>\n        </div>\n        <div className='excerpt_process'>\n          <div className='comment_block'>\n            <p id='comment'>{commentContent}</p>\n          </div>\n          <p id='tags'></p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Quote","import React from \"react\"\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      input: \"twoje hasło\",\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      input: event.target.value\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.login(this.state.input)\n  }\n\n  render() {\n    const { alert } = this.props;\n    return (\n      <div className='login_block'>\n        <form onSubmit={this.handleSubmit}>\n          <input className=\"input_field\" type='password' name='password' placeholder=\"hasło\" onChange={this.handleChange} />\n          <input className=\"submit\" type='submit' value='Wejdź' />\n          {alert && (<p className=\"pass_alert\">Nieprawidłowe hasło</p>)}\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default Login\n","import React from \"react\"\nimport \"./App.css\"\nimport refresh from './img/refresh.svg'\nimport Header from './components/Header'\nimport Quote from './components/Quote'\nimport Login from './components/Login'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loggedIn: false,\n      fragment: \"\",\n      authorContent: \"\",\n      nameContent: \"\",\n      locationContent: \"\",\n      commentContent: \"\",\n      tagsContent: \"\"\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.loggedIn !== this.state.loggedIn && this.state.loggedIn === true) {\n      this.fetchData()\n    }\n  }\n\n  fetchData = () => {\n    fetch(\"https://oeo-quotes-backend.herokuapp.com/data\")\n    .then((response) => response.json())\n    .then((payLoad) => {\n      this.setState({\n        fragment: payLoad[0].fragment,\n        authorContent: payLoad[0].author,\n        nameContent: payLoad[0].name,\n        locationContent: payLoad[0].location,\n        commentContent: payLoad[0].comment,\n        tagsContent: payLoad[0].tags,\n        passAlert: ''\n      })\n    })\n  }\n\n  login = (input) => {\n    fetch(\"https://oeo-quotes-backend.herokuapp.com/login\", {\n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        password: input\n      })\n    })\n      .then(response => response.json())\n      .then(data => {\n        if (data === \"hello user\") {\n          this.setState({\n            loggedIn: true\n          })\n        }\n        this.setState({\n          passAlert: 'nieprawidłowe hasło'\n        })\n      })\n      .catch(err => console.log(err))\n  }\n\n  render() {\n    const {\n      loggedIn,\n      fragment,\n      authorContent,\n      nameContent,\n      locationContent,\n      commentContent\n    } = this.state\n\n    return (\n      <div className='App'>\n        <Header />\n        {loggedIn\n          ? <React.Fragment>\n              <Quote\n              fragment={fragment}\n              authorContent={authorContent}\n              nameContent={nameContent}\n              locationContent={locationContent}\n              commentContent={commentContent}\n              />\n              <img onClick={() => this.fetchData()} className='button_refresh' src={ refresh } alt=\"\"></img>\n            </React.Fragment>\n          : <Login login={this.login} alert={this.state.passAlert}/>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}