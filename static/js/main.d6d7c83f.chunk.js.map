{"version":3,"sources":["img/quote.svg","img/refresh.svg","components/Header.js","components/Quote.js","components/Login.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Quote","fragment","authorContent","nameContent","locationContent","commentContent","className","src","quote","alt","id","Login","props","handleChange","event","setState","input","target","value","handleSubmit","preventDefault","login","state","alert","this","onSubmit","type","name","placeholder","onChange","React","Component","Navbar","fetchData","updateNum","numOfQuotes","onClick","refresh","App","num","fetch","then","response","json","payLoad","results","method","headers","body","JSON","stringify","password","data","loggedIn","passAlert","catch","err","console","log","prevProps","prevState","Fragment","map","element","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6d7c83f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/quote.704e0bc9.svg\";","module.exports = __webpack_public_path__ + \"static/media/refresh.d5822e5b.svg\";","import React from \"react\"\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>Cytatnik</h1>\n    </header>\n  )\n}\n\nexport default Header\n","import React from \"react\"\nimport quote from '../img/quote.svg'\n\nconst Quote = (\n  {fragment,\n  authorContent,\n  nameContent,\n  locationContent,\n  commentContent}\n  ) => {\n  return (\n    <div className='excerpt_container'>\n      <img className='quote_symbol' src={ quote } alt=\"\"/>\n      <div className='excerpt_block'>\n        <div className='excerpt_info'>\n          <p id='excerpt'>{fragment}</p>\n          <p id='details'>\n            {authorContent}; \"{nameContent}\", str. {locationContent}\n          </p>\n        </div>\n        <div className='excerpt_process'>\n          <div className='comment_block'>\n            <p id='comment'>{commentContent}</p>\n          </div>\n          <p id='tags'></p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Quote","import React from \"react\"\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      input: \"twoje hasło\",\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      input: event.target.value\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.login(this.state.input)\n  }\n\n  render() {\n    const { alert } = this.props;\n    return (\n      <div className='login_block'>\n        <form onSubmit={this.handleSubmit}>\n          <input className=\"input_field\" type='password' name='password' placeholder=\"hasło\" onChange={this.handleChange} />\n          <input className=\"submit\" type='submit' value='Wejdź' />\n          {alert && (<p className=\"pass_alert\">Nieprawidłowe hasło</p>)}\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default Login\n","import React from \"react\"\nimport refresh from \"../img/refresh.svg\"\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n\n  render() {\n    const { fetchData, updateNum, numOfQuotes } = this.props\n    return (\n      <nav>\n        <div className='nav-item'></div>\n        <div className='nav-item'></div>\n\n        <div className='nav-item num-of-quotes' onClick={updateNum}>\n          x{numOfQuotes}\n        </div>\n        <div className='nav-item' onClick={() => fetchData(numOfQuotes)}>\n          <img className='button_refresh' src={refresh} alt=''></img>\n        </div>\n      </nav>\n    )\n  }\n}\n\nexport default Navbar\n","import React from \"react\"\nimport \"./App.css\"\nimport Header from \"./components/Header\"\nimport Quote from \"./components/Quote\"\nimport Login from \"./components/Login\"\nimport Navbar from \"./components/Navbar\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loggedIn: false,\n      results: null,\n      numOfQuotes: 1,\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      prevState.loggedIn !== this.state.loggedIn &&\n      this.state.loggedIn === true\n    ) {\n      this.fetchData(this.state.numOfQuotes)\n    }\n  }\n\n  fetchData = (num) => {\n    fetch(`https://oeo-quotes-backend.herokuapp.com/quotes-${num}`)\n      .then((response) => response.json())\n      .then((payLoad) => {\n        this.setState({\n          results: payLoad.results,\n        })\n      })\n  }\n\n  login = (input) => {\n    fetch(\"https://oeo-quotes-backend.herokuapp.com/login\", {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        password: input,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (data === \"hello user\") {\n          this.setState({\n            loggedIn: true,\n          })\n        } else {\n          this.setState({\n            passAlert: \"nieprawidłowe hasło\",\n          })\n        }\n      })\n      .catch((err) => console.log(err))\n  }\n\n  updateNum = () => {\n    this.setState({\n      numOfQuotes: this.state.numOfQuotes === 1 ? 2 : 1,\n    })\n  }\n\n  render() {\n    const { loggedIn, results, numOfQuotes } = this.state\n\n    return (\n      <div className='App'>\n        <Header />\n\n        {loggedIn && results ? (\n          <React.Fragment>\n            <main>\n              {results.map((element, i) => {\n                return (\n                  <Quote\n                    key={i}\n                    fragment={results[i][5]}\n                    authorContent={results[i][2]}\n                    nameContent={results[i][1]}\n                    locationContent={results[i][4]}\n                    commentContent={results[i][6]}\n                  />\n                )\n              })}\n            </main>\n            <Navbar\n              fetchData={this.fetchData}\n              updateNum={this.updateNum}\n              numOfQuotes={numOfQuotes}\n            />\n          </React.Fragment>\n        ) : (\n          <Login login={this.login} alert={this.state.passAlert} />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}